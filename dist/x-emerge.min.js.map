{
  "version": 3,
  "sources": ["../src/index.js", "../src/cdn.js"],
  "sourcesContent": ["export default function (Alpine) {\n  Alpine.directive('emerge', async (el, { value, expression }, { effect, evaluateLater }) => {\n    if (!_D) {\n      return\n    }\n\n    const root = el.content.firstElementChild\n    const cid = root.getAttribute('emerge-cid')\n    const extra = root.getAttribute('emerge-extra')\n\n    // Lazy load components when the if-statement\n    // expression evaluates to a truthy value, or\n    // the for-statement has at least one loop.\n    if (cid && value === 'if') {\n      const evaluator = evaluateLater(expression)\n\n      effect(() => {\n        evaluator((evaluated) => {\n          if (evaluated) {\n            resolve()\n          }\n        })\n      })\n    } else if (cid && value === 'for') {\n      const items = parseForExpression(expression).items\n      const evaluator = evaluateLater(items)\n\n      effect(() => {\n        evaluator((evaluated) => {\n          if (\n            (typeof evaluated === 'number' && evaluated > 0) ||\n            (typeof evaluated === 'object' && evaluated.length > 0)\n          ) {\n            resolve()\n          }\n        })\n      })\n    } else {\n      resolve()\n    }\n\n    async function resolve() {\n      if (cid) {\n        await _D.emerge(cid, root, extra ? JSON.parse(extra) : undefined)\n      }\n\n      el.removeAttribute(`x-emerge:${value}`)\n      setTimeout(() => el.setAttribute(`x-${value}`, expression))\n    }\n  })\n\n  // This was taken from VueJS 2.* core. Thanks Vue!\n  function parseForExpression(expression) {\n    let forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/\n    let stripParensRE = /^\\s*\\(|\\)\\s*$/g\n    let forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/\n    let inMatch = expression.match(forAliasRE)\n\n    if (!inMatch) return\n\n    let res = {}\n    res.items = inMatch[2].trim()\n    let item = inMatch[1].replace(stripParensRE, '').trim()\n    let iteratorMatch = item.match(forIteratorRE)\n\n    if (iteratorMatch) {\n      res.item = item.replace(forIteratorRE, '').trim()\n      res.index = iteratorMatch[1].trim()\n\n      if (iteratorMatch[2]) {\n        res.collection = iteratorMatch[2].trim()\n      }\n    } else {\n      res.item = item\n    }\n\n    return res\n  }\n}\n", "import xEmerge from './'\n\ndocument.addEventListener('alpine:init', () => window.Alpine.plugin(xEmerge))\n"],
  "mappings": "MAAe,WAAU,EAAQ,CAC/B,EAAO,UAAU,SAAU,MAAO,EAAI,CAAE,QAAO,cAAc,CAAE,SAAQ,mBAAoB,CACzF,GAAI,CAAC,GACH,OAGF,GAAM,GAAO,EAAG,QAAQ,kBAClB,EAAM,EAAK,aAAa,cACxB,EAAQ,EAAK,aAAa,gBAKhC,GAAI,GAAO,IAAU,KAAM,CACzB,GAAM,GAAY,EAAc,GAEhC,EAAO,IAAM,CACX,EAAU,AAAC,GAAc,CACvB,AAAI,GACF,gBAIG,GAAO,IAAU,MAAO,CACjC,GAAM,GAAQ,EAAmB,GAAY,MACvC,EAAY,EAAc,GAEhC,EAAO,IAAM,CACX,EAAU,AAAC,GAAc,CACvB,AACG,OAAO,IAAc,UAAY,EAAY,GAC7C,MAAO,IAAc,UAAY,EAAU,OAAS,IAErD,YAKN,KAGF,kBAAyB,CACvB,AAAI,GACF,KAAM,IAAG,OAAO,EAAK,EAAM,EAAQ,KAAK,MAAM,GAAS,QAGzD,EAAG,gBAAgB,YAAY,KAC/B,WAAW,IAAM,EAAG,aAAa,KAAK,IAAS,OAKnD,WAA4B,EAAY,CACtC,GAAI,GAAgB,iCAChB,EAAgB,iBAChB,EAAa,qCACb,EAAU,EAAW,MAAM,GAE/B,GAAI,CAAC,EAAS,OAEd,GAAI,GAAM,GACV,EAAI,MAAQ,EAAQ,GAAG,OACvB,GAAI,GAAO,EAAQ,GAAG,QAAQ,EAAe,IAAI,OAC7C,EAAgB,EAAK,MAAM,GAE/B,MAAI,GACF,GAAI,KAAO,EAAK,QAAQ,EAAe,IAAI,OAC3C,EAAI,MAAQ,EAAc,GAAG,OAEzB,EAAc,IAChB,GAAI,WAAa,EAAc,GAAG,SAGpC,EAAI,KAAO,EAGN,GC1EX,SAAS,iBAAiB,cAAe,IAAM,OAAO,OAAO,OAAO",
  "names": []
}
